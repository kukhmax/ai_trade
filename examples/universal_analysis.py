#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –ò–ò-–∞–≥–µ–Ω—Ç–æ–º
"""

import asyncio
import json
from datetime import datetime, timedelta
from core.universal_agent import UniversalAIAgent
from core.config import AppConfig

async def comprehensive_analysis():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏"""
    
    print("üéØ –ò–ò-–ê–≥–µ–Ω—Ç: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    config = AppConfig()
    agent = UniversalAIAgent(config)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
    symbol = "BTCUSDT"
    timeframes = ["1h", "4h", "1d"]
    methods_combinations = [
        ["technical"],
        ["technical", "wyckoff"],
        ["technical", "elliott"],
        ["technical", "wyckoff", "elliott", "sentiment"]
    ]
    
    print(f"üîç –°–∏–º–≤–æ–ª: {symbol}")
    print(f"‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {', '.join(timeframes)}")
    print()
    
    for timeframe in timeframes:
        print(f"\nüìä –ê–ù–ê–õ–ò–ó –ù–ê –¢–ê–ô–ú–§–†–ï–ô–ú–ï {timeframe}:")
        print("-" * 40)
        
        for methods in methods_combinations:
            try:
                print(f"\nüîß –ú–µ—Ç–æ–¥—ã: {', '.join(methods)}")
                
                result = await agent.analyze_pair(
                    symbol=symbol,
                    timeframe=timeframe,
                    analysis_methods=methods,
                    include_news=True,
                    include_fundamental=True
                )
                
                signal = result['ai_signal']
                
                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                confidence_bar = "‚ñà" * int(signal.confidence * 20) + "‚ñë" * (20 - int(signal.confidence * 20))
                
                if signal.action == 'BUY':
                    action_str = "üü¢ –ü–û–ö–£–ü–ö–ê"
                elif signal.action == 'SELL':
                    action_str = "üî¥ –ü–†–û–î–ê–ñ–ê"
                else:
                    action_str = "üü° –£–î–ï–†–ñ–ê–ù–ò–ï"
                
                print(f"   {action_str} | –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence_bar} {signal.confidence:.1%}")
                
                if signal.action != 'HOLD':
                    print(f"   üí∞ –í—Ö–æ–¥: ${signal.entry_price:.2f}")
                    print(f"   üõë –°—Ç–æ–ø: ${signal.stop_loss:.2f}")
                    print(f"   üéØ –ü—Ä–æ—Ñ–∏—Ç: ${signal.take_profit:.2f}")
                
                # –ö—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
                reasoning_short = signal.reasoning[:100] + "..." if len(signal.reasoning) > 100 else signal.reasoning
                print(f"   üìù {reasoning_short}")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
                continue
    
    print("\n" + "=" * 60)
    print("‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

async def multi_timeframe_analysis():
    """–ú—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
    
    print("\nüïí –ú–£–õ–¨–¢–ò–¢–ê–ô–ú–§–†–ï–ô–ú–ù–´–ô –ê–ù–ê–õ–ò–ó")
    print("=" * 50)
    
    config = AppConfig()
    agent = UniversalAIAgent(config)
    
    symbol = "ETHUSDT"
    timeframes = ["15m", "1h", "4h", "1d"]
    methods = ["technical", "wyckoff"]
    
    print(f"üîç –ê–Ω–∞–ª–∏–∑ {symbol} –Ω–∞ multiple —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö...")
    print()
    
    signals_summary = {}
    
    for timeframe in timeframes:
        try:
            result = await agent.analyze_pair(
                symbol=symbol,
                timeframe=timeframe,
                analysis_methods=methods,
                include_news=False
            )
            
            signal = result['ai_signal']
            signals_summary[timeframe] = {
                'action': signal.action,
                'confidence': signal.confidence,
                'price': result['current_price']
            }
            
            print(f"‚è∞ {timeframe:>4}: {signal.action:>6} ({(signal.confidence*100):3.0f}%) - ${result['current_price']:.2f}")
            
        except Exception as e:
            print(f"‚è∞ {timeframe:>4}: ‚ùå –û—à–∏–±–∫–∞")
            continue
    
    # –°–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
    print(f"\nüìã –°–í–û–î–ö–ê –ü–û –¢–ê–ô–ú–§–†–ï–ô–ú–ê–ú:")
    buy_count = sum(1 for s in signals_summary.values() if s['action'] == 'BUY')
    sell_count = sum(1 for s in signals_summary.values() if s['action'] == 'SELL')
    hold_count = sum(1 for s in signals_summary.values() if s['action'] == 'HOLD')
    
    print(f"   üü¢ –ü–û–ö–£–ü–ö–ê: {buy_count} —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤")
    print(f"   üî¥ –ü–†–û–î–ê–ñ–ê: {sell_count} —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤")
    print(f"   üü° –£–î–ï–†–ñ–ê–ù–ò–ï: {hold_count} —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤")
    
    # –û–±—â–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    if buy_count > sell_count and buy_count > hold_count:
        overall_signal = "üü¢ –ü–†–ï–û–ë–õ–ê–î–ê–ï–¢ –ü–û–ö–£–ü–ö–ê"
    elif sell_count > buy_count and sell_count > hold_count:
        overall_signal = "üî¥ –ü–†–ï–û–ë–õ–ê–î–ê–ï–¢ –ü–†–û–î–ê–ñ–ê"
    else:
        overall_signal = "üü° –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–û–°–¢–¨"
    
    print(f"   üéØ –û–ë–©–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: {overall_signal}")

async def export_analysis_results():
    """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤ JSON"""
    
    print("\nüíæ –≠–ö–°–ü–û–†–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ê–ù–ê–õ–ò–ó–ê")
    print("=" * 50)
    
    config = AppConfig()
    agent = UniversalAIAgent(config)
    
    symbol = "BTCUSDT"
    timeframe = "4h"
    methods = ["technical", "wyckoff", "elliott", "sentiment"]
    
    try:
        print(f"üîç –ê–Ω–∞–ª–∏–∑ {symbol} –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞...")
        
        result = await agent.analyze_pair(
            symbol=symbol,
            timeframe=timeframe,
            analysis_methods=methods,
            include_news=True,
            include_fundamental=True
        )
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_data = {
            'symbol': result['symbol'],
            'timeframe': result['timeframe'],
            'timestamp': result['timestamp'].isoformat(),
            'current_price': result['current_price'],
            'signal': {
                'action': result['ai_signal'].action,
                'confidence': result['ai_signal'].confidence,
                'entry_price': result['ai_signal'].entry_price,
                'stop_loss': result['ai_signal'].stop_loss,
                'take_profit': result['ai_signal'].take_profit,
                'reasoning': result['ai_signal'].reasoning,
                'indicators_used': result['ai_signal'].indicators_used
            },
            'analysis_methods': result['analysis_methods'],
            'data_points': result['data_points']
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON —Ñ–∞–π–ª
        filename = f"analysis_{symbol}_{timeframe}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(export_data, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
        print(f"üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –Ω–∞ {timeframe} —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –ò–ò-–ê–≥–µ–Ω—Ç: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞")
    print("–í–µ—Ä—Å–∏—è 1.0 | –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞")
    print()
    
    # –ó–∞–ø—É—Å–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
    asyncio.run(comprehensive_analysis())
    asyncio.run(multi_timeframe_analysis())
    asyncio.run(export_analysis_results())
    
    print("\nüéâ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –±—ç–∫—Ç–µ—Å—Ç–æ–≤.")

if __name__ == "__main__":
    main()