#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç —Å –ò–ò-–∞–≥–µ–Ω—Ç–æ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞
"""

import asyncio
import logging
# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–∫ `python -m examples.quick_start` –∏ –∫–∞–∫ `python examples/quick_start.py`
try:
    from core.universal_agent import UniversalAIAgent
    from core.config import AppConfig
except ModuleNotFoundError:
    import sys
    from pathlib import Path
    sys.path.append(str(Path(__file__).resolve().parents[1]))
    from core.universal_agent import UniversalAIAgent
    from core.config import AppConfig

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def quick_analysis():
    """–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–ø–∞—Ä"""
    
    print("üöÄ –ò–ò-–ê–≥–µ–Ω—Ç: –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
    try:
        config = AppConfig()
        agent = UniversalAIAgent(config)
        print("‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return
    
    # –°–ø–∏—Å–æ–∫ –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    symbols = ["BTCUSDT", "ETHUSDT", "LTCUSDT"]
    timeframe = "1h"
    methods = ["technical", "wyckoff", "elliott"]
    
    print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä: {', '.join(symbols)}")
    print(f"‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}")
    print(f"üîß –ú–µ—Ç–æ–¥—ã: {', '.join(methods)}")
    print("-" * 50)
    
    for symbol in symbols:
        try:
            print(f"\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {symbol}...")
            
            # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
            result = await agent.analyze_pair(
                symbol=symbol,
                timeframe=timeframe,
                analysis_methods=methods,
                include_news=False,
                include_fundamental=False
            )
            
            signal = result['ai_signal']
            
            # –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
            if signal.action == 'BUY':
                action_emoji = "üü¢"
            elif signal.action == 'SELL':
                action_emoji = "üî¥"
            else:
                action_emoji = "üü°"
            
            print(f"{action_emoji} {symbol}:")
            print(f"   –°–∏–≥–Ω–∞–ª: {signal.action} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.1%})")
            print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${result['current_price']:.2f}")
            
            if signal.action != 'HOLD':
                print(f"   üí∞ –í—Ö–æ–¥: ${signal.entry_price:.2f}")
                print(f"   üõë –°—Ç–æ–ø-–ª–æ—Å—Å: ${signal.stop_loss:.2f}")
                print(f"   üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${signal.take_profit:.2f}")
            
            print(f"   üìù {signal.reasoning}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            continue
    
    print("\n" + "=" * 50)
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

async def single_pair_analysis():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π –ø–∞—Ä—ã"""
    
    print("\nüéØ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π –ø–∞—Ä—ã")
    print("=" * 50)
    
    config = AppConfig()
    agent = UniversalAIAgent(config)
    
    symbol = "BTCUSDT"
    timeframe = "1h"
    methods = ["technical", "wyckoff", "elliott", "sentiment"]
    
    try:
        print(f"üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ {symbol} –Ω–∞ {timeframe}...")
        
        result = await agent.analyze_pair(
            symbol=symbol,
            timeframe=timeframe,
            analysis_methods=methods,
            include_news=True,
            include_fundamental=True
        )
        
        signal = result['ai_signal']
        
        print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê {symbol}:")
        print(f"üìä –¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}")
        print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${result['current_price']:.2f}")
        print(f"üéØ –ò—Ç–æ–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: {signal.action}")
        print(f"üìà –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.1%}")
        
        if signal.action != 'HOLD':
            print(f"\nüí° –¢–û–†–ì–û–í–´–ï –£–†–û–í–ù–ò:")
            print(f"   üì• –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${signal.entry_price:.2f}")
            print(f"   üõë –°—Ç–æ–ø-–ª–æ—Å—Å: ${signal.stop_loss:.2f} ({((signal.entry_price - signal.stop_loss) / signal.entry_price * 100):.1f}%)")
            print(f"   üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${signal.take_profit:.2f} ({((signal.take_profit - signal.entry_price) / signal.entry_price * 100):.1f}%)")
            print(f"   üìè –†–∏—Å–∫/–ü—Ä–∏–±—ã–ª—å: 1:{((signal.take_profit - signal.entry_price) / (signal.entry_price - signal.stop_loss)):.1f}")
        
        print(f"\nüìù –û–ë–û–°–ù–û–í–ê–ù–ò–ï:")
        print(f"   {signal.reasoning}")
        
        print(f"\nüîß –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ù–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´:")
        for indicator in signal.indicators_used:
            print(f"   ‚Ä¢ {indicator}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –ò–ò-–ê–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞")
    print("–í–µ—Ä—Å–∏—è 1.0 | –°–¥–µ–ª–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤")
    print()
    
    # –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    asyncio.run(quick_analysis())
    
    # –ó–∞–ø—É—Å–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    asyncio.run(single_pair_analysis())
    
    print("\nüéâ –ì–æ—Ç–æ–≤–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –≤ –ø–∞–ø–∫–µ examples/ –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.")

if __name__ == "__main__":
    main()