# examples/visual_backtest.py
import asyncio
import plotly.io as pio
from core.universal_agent import UniversalAIAgent
from core.config import AppConfig
from backtesting.enhanced_backtester import EnhancedBacktester

async def run_visual_backtest():
    """–ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    config = AppConfig()
    agent = UniversalAIAgent(config)
    backtester = EnhancedBacktester(agent)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±—ç–∫—Ç–µ—Å—Ç–∞
    symbol = "BTCUSDT"
    timeframe = "4h"
    methods = ["technical", "wyckoff", "elliott"]
    start_date = "2024-01-01"
    end_date = "2024-03-01"
    
    # –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞
    enhanced_result = await backtester.run_enhanced_backtest(
        symbol=symbol,
        timeframe=timeframe,
        analysis_methods=methods,
        start_date=start_date,
        end_date=end_date
    )
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    report = backtester.generate_comprehensive_report(
        enhanced_result, symbol, timeframe
    )
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤ HTML
    pio.write_html(report['main_chart'], 'backtest_main_chart.html')
    pio.write_html(report['metrics_dashboard'], 'backtest_metrics.html')
    pio.write_html(report['signals_timeline'], 'backtest_timeline.html')
    
    print("‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
    print("   - backtest_main_chart.html (–æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫)")
    print("   - backtest_metrics.html (–º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)")
    print("   - backtest_timeline.html (—Ç–∞–π–º–ª–∞–π–Ω —Å–∏–≥–Ω–∞–ª–æ–≤)")
    
    # –í—ã–≤–æ–¥ –º–µ—Ç—Ä–∏–∫
    print(f"\nüìä –ú–ï–¢–†–ò–ö–ò –ë–≠–ö–¢–ï–°–¢–ê:")
    print(f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {report['metrics']['total_trades']}")
    print(f"Win Rate: {report['metrics']['win_rate']:.2%}")
    print(f"–û–±—â–∏–π PnL: ${report['metrics']['total_pnl']:.2f}")
    print(f"–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ${report['metrics']['avg_win']:.2f}")
    print(f"–°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: ${report['metrics']['avg_loss']:.2f}")
    print(f"–§–∞–∫—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏: {report['metrics']['profit_factor']:.2f}")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 5 —Å–¥–µ–ª–æ–∫
    print(f"\nüìã –ü–û–°–õ–ï–î–ù–ò–ï –°–î–ï–õ–ö–ò:")
    for i, trade in enumerate(report['trades'][:5]):
        status = "‚úÖ –ü–†–û–§–ò–¢" if trade['success'] else "‚ùå –£–ë–´–¢–û–ö"
        print(f"  {i+1}. {trade['entry_time'].strftime('%Y-%m-%d')} | "
              f"–í—Ö–æ–¥: ${trade['entry_price']:.2f} | "
              f"–í—ã—Ö–æ–¥: ${trade['exit_price']:.2f} | "
              f"PnL: ${trade['pnl']:.2f} | {status}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –≤—ã–±–æ—Ä–æ–º"""
    
    print("üéØ –ò–ò-–ê–≥–µ–Ω—Ç: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –±—ç–∫—Ç–µ—Å—Ç–∞")
    print("=" * 50)
    
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    asyncio.run(run_visual_backtest())

if __name__ == "__main__":
    main()