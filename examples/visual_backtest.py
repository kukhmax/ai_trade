#!/usr/bin/env python3
"""
–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –±—ç–∫—Ç–µ—Å—Ç–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
"""

import asyncio
import plotly.io as pio
from datetime import datetime, timedelta
from core.universal_agent import UniversalAIAgent
from core.config import AppConfig
from backtesting.enhanced_backtester import EnhancedBacktester

async def run_visual_backtest():
    """–ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    
    print("üìà –ò–ò-–ê–≥–µ–Ω—Ç: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –±—ç–∫—Ç–µ—Å—Ç–∞")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    config = AppConfig()
    agent = UniversalAIAgent(config)
    backtester = EnhancedBacktester(agent)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±—ç–∫—Ç–µ—Å—Ç–∞
    symbol = "BTCUSDT"
    timeframe = "4h"
    methods = ["technical", "wyckoff"]
    start_date = (datetime.now() - timedelta(days=60)).strftime('%Y-%m-%d')
    end_date = datetime.now().strftime('%Y-%m-%d')
    
    print(f"üîç –°–∏–º–≤–æ–ª: {symbol}")
    print(f"‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}")
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}")
    print(f"üîß –ú–µ—Ç–æ–¥—ã: {', '.join(methods)}")
    print()
    
    try:
        print("üîÑ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞...")
        
        # –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞
        enhanced_result = await backtester.run_enhanced_backtest(
            symbol=symbol,
            timeframe=timeframe,
            analysis_methods=methods,
            start_date=start_date,
            end_date=end_date
        )
        
        print("‚úÖ –ë—ç–∫—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤...")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
        report = backtester.generate_comprehensive_report(
            enhanced_result, symbol, timeframe
        )
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤ HTML
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        main_chart_file = f"backtest_main_{symbol}_{timestamp}.html"
        metrics_file = f"backtest_metrics_{symbol}_{timestamp}.html"
        timeline_file = f"backtest_timeline_{symbol}_{timestamp}.html"
        
        pio.write_html(report['main_chart'], main_chart_file)
        pio.write_html(report['metrics_dashboard'], metrics_file)
        pio.write_html(report['signals_timeline'], timeline_file)
        
        print(f"\n‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
        print(f"   üìà –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫: {main_chart_file}")
        print(f"   üìä –ú–µ—Ç—Ä–∏–∫–∏: {metrics_file}")
        print(f"   üïí –¢–∞–π–º–ª–∞–π–Ω: {timeline_file}")
        
        # –í—ã–≤–æ–¥ –º–µ—Ç—Ä–∏–∫
        metrics = report['metrics']
        print(f"\nüìä –ú–ï–¢–†–ò–ö–ò –ë–≠–ö–¢–ï–°–¢–ê:")
        print(f"   üìà –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {metrics['total_trades']}")
        print(f"   ‚úÖ –í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö: {metrics['winning_trades']}")
        print(f"   ‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö: {metrics['losing_trades']}")
        print(f"   üéØ Win Rate: {metrics['win_rate']:.1%}")
        print(f"   üí∞ –û–±—â–∏–π PnL: ${metrics['total_pnl']:.2f}")
        print(f"   üìâ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {metrics['max_drawdown']:.1f}%")
        print(f"   ‚ö° –§–∞–∫—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏: {metrics['profit_factor']:.2f}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–¥–µ–ª–∫–∞–º
        if metrics['total_trades'] > 0:
            print(f"\nüìã –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–î–ï–õ–û–ö:")
            print(f"   üìä –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ${metrics['avg_win']:.2f}")
            print(f"   üìâ –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: ${metrics['avg_loss']:.2f}")
            print(f"   ‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {metrics['avg_trade_duration']:.1f} –¥–Ω–µ–π")
            print(f"   üöÄ –°–∞–º–∞—è –±–æ–ª—å—à–∞—è –ø–æ–±–µ–¥–∞: ${metrics['largest_win']:.2f}")
            print(f"   üîª –°–∞–º—ã–π –±–æ–ª—å—à–æ–π —É–±—ã—Ç–æ–∫: ${metrics['largest_loss']:.2f}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏
        trades = report['trades']
        if trades:
            print(f"\nüìã –ü–û–°–õ–ï–î–ù–ò–ï –°–î–ï–õ–ö–ò:")
            for i, trade in enumerate(trades[-5:]):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–¥–µ–ª–æ–∫
                status = "‚úÖ –ü–†–û–§–ò–¢" if trade['success'] else "‚ùå –£–ë–´–¢–û–ö"
                pnl_color = "green" if trade['pnl'] > 0 else "red"
                print(f"   {i+1}. {trade['entry_time'].strftime('%m/%d %H:%M')} | "
                      f"–í—Ö–æ–¥: ${trade['entry_price']:.2f} | "
                      f"–í—ã—Ö–æ–¥: ${trade['exit_price']:.2f} | "
                      f"PnL: ${trade['pnl']:+.2f} | {status}")
        
        print(f"\nüí° –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

async def compare_strategies():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∞–Ω–∞–ª–∏–∑–∞"""
    
    print("\nüî¨ –°–†–ê–í–ù–ï–ù–ò–ï –°–¢–†–ê–¢–ï–ì–ò–ô –ê–ù–ê–õ–ò–ó–ê")
    print("=" * 50)
    
    config = AppConfig()
    agent = UniversalAIAgent(config)
    backtester = EnhancedBacktester(agent)
    
    symbol = "ETHUSDT"
    timeframe = "1h"
    start_date = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
    end_date = datetime.now().strftime('%Y-%m-%d')
    
    strategies = [
        {"name": "–¢–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π", "methods": ["technical"]},
        {"name": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π + –í–∞–π–∫–æ—Ñ—Ñ", "methods": ["technical", "wyckoff"]},
        {"name": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π + –≠–ª–ª–∏–æ—Ç—Ç", "methods": ["technical", "elliott"]},
        {"name": "–í—Å–µ –º–µ—Ç–æ–¥—ã", "methods": ["technical", "wyckoff", "elliott", "sentiment"]}
    ]
    
    results = []
    
    for strategy in strategies:
        try:
            print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: {strategy['name']}...")
            
            result = await backtester.run_enhanced_backtest(
                symbol=symbol,
                timeframe=timeframe,
                analysis_methods=strategy['methods'],
                start_date=start_date,
                end_date=end_date
            )
            
            metrics = result.metrics
            
            results.append({
                'strategy': strategy['name'],
                'total_trades': metrics['total_trades'],
                'win_rate': metrics['win_rate'],
                'total_pnl': metrics['total_pnl'],
                'profit_factor': metrics['profit_factor']
            })
            
            print(f"   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {metrics['total_trades']} —Å–¥–µ–ª–æ–∫, Win Rate: {metrics['win_rate']:.1%}")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            continue
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    if results:
        print(f"\nüèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–†–ê–í–ù–ï–ù–ò–Ø –°–¢–†–ê–¢–ï–ì–ò–ô:")
        print("-" * 70)
        print(f"{'–°—Ç—Ä–∞—Ç–µ–≥–∏—è':<25} {'–°–¥–µ–ª–∫–∏':<8} {'Win Rate':<10} {'PnL':<12} {'Profit Factor':<15}")
        print("-" * 70)
        
        for result in sorted(results, key=lambda x: x['total_pnl'], reverse=True):
            pnl_color = "üü¢" if result['total_pnl'] > 0 else "üî¥"
            print(f"{result['strategy']:<25} {result['total_trades']:<8} {result['win_rate']:<10.1%} "
                  f"{pnl_color} ${result['total_pnl']:<10.2f} {result['profit_factor']:<15.2f}")
        
        # –õ—É—á—à–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        best_strategy = max(results, key=lambda x: x['total_pnl'])
        print(f"\nüéØ –õ–£–ß–®–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø: {best_strategy['strategy']}")
        print(f"   üí∞ PnL: ${best_strategy['total_pnl']:.2f}")
        print(f"   üéØ Win Rate: {best_strategy['win_rate']:.1%}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –ò–ò-–ê–≥–µ–Ω—Ç: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –±—ç–∫—Ç–µ—Å—Ç–∞ –∏ –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
    print("–í–µ—Ä—Å–∏—è 1.0 | –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –º–µ—Ç—Ä–∏–∫–∏")
    print()
    
    # –ó–∞–ø—É—Å–∫ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞
    asyncio.run(run_visual_backtest())
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    asyncio.run(compare_strategies())
    
    print("\nüéâ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üí° –û—Ç–∫—Ä–æ–π—Ç–µ HTML —Ñ–∞–π–ª—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤.")

if __name__ == "__main__":
    main()