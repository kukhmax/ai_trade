# cli.py
import argparse
import asyncio
import json
from core.universal_agent import UniversalAIAgent
from core.config import AppConfig

async def analyze_command(args):
    """–ö–æ–º–∞–Ω–¥–∞ –∞–Ω–∞–ª–∏–∑–∞"""
    agent = UniversalAIAgent(AppConfig())
    
    result = await agent.analyze_pair(
        symbol=args.symbol,
        timeframe=args.timeframe,
        analysis_methods=args.methods,
        include_news=not args.no_news,
        include_fundamental=not args.no_fundamental
    )
    
    if args.format == 'json':
        print(json.dumps({
            'symbol': result['symbol'],
            'signal': result['ai_signal'].action,
            'confidence': result['ai_signal'].confidence,
            'entry_price': result['ai_signal'].entry_price,
            'stop_loss': result['ai_signal'].stop_loss,
            'take_profit': result['ai_signal'].take_profit,
            'reasoning': result['ai_signal'].reasoning
        }, indent=2))
    else:
        signal = result['ai_signal']
        print(f"üéØ {result['symbol']} | {result['timeframe']}")
        print(f"üìä –°–∏–≥–Ω–∞–ª: {signal.action} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2%})")
        print(f"üí∞ –í—Ö–æ–¥: ${signal.entry_price:.2f}")
        print(f"üõë –°—Ç–æ–ø-–ª–æ—Å—Å: ${signal.stop_loss:.2f}")
        print(f"üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${signal.take_profit:.2f}")
        print(f"üìù –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {signal.reasoning}")

def main():
    parser = argparse.ArgumentParser(description='–ò–ò-–∞–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞')
    subparsers = parser.add_subparsers(dest='command')
    
    # –ü–∞—Ä—Å–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    analyze_parser = subparsers.add_parser('analyze', help='–ê–Ω–∞–ª–∏–∑ –ø–∞—Ä—ã')
    analyze_parser.add_argument('symbol', help='–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)')
    analyze_parser.add_argument('--timeframe', '-t', default='4h', 
                               help='–¢–∞–π–º—Ñ—Ä–µ–π–º (1m, 5m, 1h, 4h, 1d)')
    analyze_parser.add_argument('--methods', '-m', nargs='+', 
                               default=['technical', 'wyckoff'],
                               help='–ú–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞')
    analyze_parser.add_argument('--no-news', action='store_true', 
                               help='–ò—Å–∫–ª—é—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π')
    analyze_parser.add_argument('--no-fundamental', action='store_true',
                               help='–ò—Å–∫–ª—é—á–∏—Ç—å —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑')
    analyze_parser.add_argument('--format', '-f', choices=['text', 'json'], 
                               default='text', help='–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞')
    
    args = parser.parse_args()
    
    if args.command == 'analyze':
        asyncio.run(analyze_command(args))
    else:
        parser.print_help()

if __name__ == "__main__":
    main()