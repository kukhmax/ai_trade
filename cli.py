#!/usr/bin/env python3
"""
–ö–æ–º–∞–Ω–¥–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ò–ò-–∞–≥–µ–Ω—Ç–∞
"""

import argparse
import asyncio
import json
import sys
from datetime import datetime
from core.universal_agent import UniversalAIAgent
from core.config import AppConfig

async def analyze_command(args):
    """–ö–æ–º–∞–Ω–¥–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä—ã"""
    try:
        agent = UniversalAIAgent(AppConfig())
        
        result = await agent.analyze_pair(
            symbol=args.symbol.upper(),
            timeframe=args.timeframe,
            analysis_methods=args.methods,
            include_news=not args.no_news,
            include_fundamental=not args.no_fundamental
        )
        
        if args.format == 'json':
            # –í—ã–≤–æ–¥ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
            output = {
                'symbol': result['symbol'],
                'timeframe': result['timeframe'],
                'timestamp': result['timestamp'].isoformat(),
                'current_price': result['current_price'],
                'signal': {
                    'action': result['ai_signal'].action,
                    'confidence': result['ai_signal'].confidence,
                    'entry_price': result['ai_signal'].entry_price,
                    'stop_loss': result['ai_signal'].stop_loss,
                    'take_profit': result['ai_signal'].take_profit,
                    'reasoning': result['ai_signal'].reasoning,
                    'indicators_used': result['ai_signal'].indicators_used
                }
            }
            print(json.dumps(output, indent=2, ensure_ascii=False))
        else:
            # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
            signal = result['ai_signal']
            
            print(f"\nüéØ –ê–ù–ê–õ–ò–ó {result['symbol']} | {result['timeframe']}")
            print("=" * 50)
            
            # –°–∏–≥–Ω–∞–ª —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
            if signal.action == 'BUY':
                action_str = "üü¢ –ü–û–ö–£–ü–ö–ê"
            elif signal.action == 'SELL':
                action_str = "üî¥ –ü–†–û–î–ê–ñ–ê"
            else:
                action_str = "üü° –£–î–ï–†–ñ–ê–ù–ò–ï"
            
            print(f"{action_str} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.1%})")
            print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${result['current_price']:.2f}")
            
            if signal.action != 'HOLD':
                print(f"\nüí° –¢–û–†–ì–û–í–´–ï –£–†–û–í–ù–ò:")
                print(f"   üì• –í—Ö–æ–¥: ${signal.entry_price:.2f}")
                print(f"   üõë –°—Ç–æ–ø-–ª–æ—Å—Å: ${signal.stop_loss:.2f}")
                print(f"   üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${signal.take_profit:.2f}")
                
                # –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞/–ø—Ä–∏–±—ã–ª–∏
                risk = signal.entry_price - signal.stop_loss
                reward = signal.take_profit - signal.entry_price
                if risk > 0:
                    rr_ratio = reward / risk
                    print(f"   üìè –†–∏—Å–∫/–ü—Ä–∏–±—ã–ª—å: 1:{rr_ratio:.2f}")
            
            print(f"\nüìù –û–ë–û–°–ù–û–í–ê–ù–ò–ï:")
            print(f"   {signal.reasoning}")
            
            print(f"\nüîß –ú–ï–¢–û–î–´ –ê–ù–ê–õ–ò–ó–ê: {', '.join(result['analysis_methods'])}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}", file=sys.stderr)
        sys.exit(1)

async def backtest_command(args):
    """–ö–æ–º–∞–Ω–¥–∞ –±—ç–∫—Ç–µ—Å—Ç–∞"""
    try:
        from backtesting.enhanced_backtester import EnhancedBacktester
        
        agent = UniversalAIAgent(AppConfig())
        backtester = EnhancedBacktester(agent)
        
        print(f"üîç –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞ –¥–ª—è {args.symbol}...")
        
        result = await backtester.run_enhanced_backtest(
            symbol=args.symbol.upper(),
            timeframe=args.timeframe,
            analysis_methods=args.methods,
            start_date=args.start_date,
            end_date=args.end_date
        )
        
        report = backtester.generate_comprehensive_report(result, args.symbol, args.timeframe)
        metrics = report['metrics']
        
        if args.format == 'json':
            # JSON –≤—ã–≤–æ–¥
            output = {
                'symbol': args.symbol,
                'timeframe': args.timeframe,
                'period': f"{args.start_date} to {args.end_date}",
                'metrics': metrics,
                'trades_count': len(report['trades'])
            }
            print(json.dumps(output, indent=2))
        else:
            # –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥
            print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–≠–ö–¢–ï–°–¢–ê {args.symbol}")
            print("=" * 50)
            
            print(f"üìä –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
            print(f"   üìà –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {metrics['total_trades']}")
            print(f"   ‚úÖ –í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö: {metrics['winning_trades']}")
            print(f"   ‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö: {metrics['losing_trades']}")
            print(f"   üéØ Win Rate: {metrics['win_rate']:.1%}")
            print(f"   üí∞ –û–±—â–∏–π PnL: ${metrics['total_pnl']:.2f}")
            print(f"   üìâ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {metrics['max_drawdown']:.1f}%")
            print(f"   ‚ö° –§–∞–∫—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏: {metrics['profit_factor']:.2f}")
            
            if metrics['total_trades'] > 0:
                print(f"\nüìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–¥–µ–ª–æ–∫:")
                print(f"   üìä –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ${metrics['avg_win']:.2f}")
                print(f"   üìâ –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: ${metrics['avg_loss']:.2f}")
                print(f"   üöÄ –°–∞–º–∞—è –±–æ–ª—å—à–∞—è –ø–æ–±–µ–¥–∞: ${metrics['largest_win']:.2f}")
                print(f"   üîª –°–∞–º—ã–π –±–æ–ª—å—à–æ–π —É–±—ã—Ç–æ–∫: ${metrics['largest_loss']:.2f}")
            
            print(f"\nüí° –î–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python examples/visual_backtest.py")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞: {e}", file=sys.stderr)
        sys.exit(1)

async def list_command(args):
    """–ö–æ–º–∞–Ω–¥–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä"""
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä —Å –±–∏—Ä–∂–∏
        popular_pairs = [
            "BTCUSDT", "ETHUSDT", "BNBUSDT", "ADAUSDT", "DOTUSDT",
            "LINKUSDT", "LTCUSDT", "BCHUSDT", "XLMUSDT", "XRPUSDT"
        ]
        
        if args.format == 'json':
            print(json.dumps({'pairs': popular_pairs}, indent=2))
        else:
            print("üìä –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã:")
            for i, pair in enumerate(popular_pairs, 1):
                print(f"   {i:2d}. {pair}")
            print(f"\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python cli.py analyze <SYMBOL> –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}", file=sys.stderr)
        sys.exit(1)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(
        description='ü§ñ –ò–ò-–ê–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python cli.py analyze BTCUSDT
  python cli.py analyze ETHUSDT --timeframe 1h --methods technical wyckoff
  python cli.py backtest BTCUSDT --start-date 2024-01-01 --end-date 2024-03-01
  python cli.py list
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='–ö–æ–º–∞–Ω–¥—ã')
    
    # –ü–∞—Ä—Å–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    analyze_parser = subparsers.add_parser('analyze', help='–ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã')
    analyze_parser.add_argument('symbol', help='–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)')
    analyze_parser.add_argument('--timeframe', '-t', default='4h', 
                               choices=['15m', '1h', '4h', '1d'],
                               help='–¢–∞–π–º—Ñ—Ä–µ–π–º –∞–Ω–∞–ª–∏–∑–∞')
    analyze_parser.add_argument('--methods', '-m', nargs='+', 
                               default=['technical', 'wyckoff'],
                               choices=['technical', 'wyckoff', 'elliott', 'sentiment'],
                               help='–ú–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞')
    analyze_parser.add_argument('--no-news', action='store_true', 
                               help='–ò—Å–∫–ª—é—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π')
    analyze_parser.add_argument('--no-fundamental', action='store_true',
                               help='–ò—Å–∫–ª—é—á–∏—Ç—å —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑')
    analyze_parser.add_argument('--format', '-f', choices=['text', 'json'], 
                               default='text', help='–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞')
    
    # –ü–∞—Ä—Å–µ—Ä –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞
    backtest_parser = subparsers.add_parser('backtest', help='–ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞')
    backtest_parser.add_argument('symbol', help='–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)')
    backtest_parser.add_argument('--timeframe', '-t', default='4h',
                               choices=['15m', '1h', '4h', '1d'],
                               help='–¢–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞')
    backtest_parser.add_argument('--methods', '-m', nargs='+',
                               default=['technical', 'wyckoff'],
                               choices=['technical', 'wyckoff', 'elliott', 'sentiment'],
                               help='–ú–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞')
    backtest_parser.add_argument('--start-date', '-s', required=True,
                               help='–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)')
    backtest_parser.add_argument('--end-date', '-e', required=True,
                               help='–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)')
    backtest_parser.add_argument('--format', '-f', choices=['text', 'json'],
                               default='text', help='–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞')
    
    # –ü–∞—Ä—Å–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–∞—Ä
    list_parser = subparsers.add_parser('list', help='–°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä')
    list_parser.add_argument('--format', '-f', choices=['text', 'json'],
                           default='text', help='–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã
    if args.command == 'analyze':
        asyncio.run(analyze_command(args))
    elif args.command == 'backtest':
        asyncio.run(backtest_command(args))
    elif args.command == 'list':
        asyncio.run(list_command(args))

if __name__ == "__main__":
    main()