#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–µ–±-–¥–∞—à–±–æ—Ä–¥ –¥–ª—è –ò–ò-–∞–≥–µ–Ω—Ç–∞
"""

import dash
from dash import dcc, html, Input, Output, State, callback_context
import plotly.graph_objects as go
import pandas as pd
import asyncio
import logging
from datetime import datetime, timedelta
import json

from core.universal_agent import UniversalAIAgent
from core.config import AppConfig
from backtesting.enhanced_backtester import EnhancedBacktester

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class BacktestDashboard:
    def __init__(self):
        self.app = dash.Dash(
            __name__, 
            external_stylesheets=['https://codepen.io/chriddyp/pen/bWLwgP.css'],
            meta_tags=[{"name": "viewport", "content": "width=device-width, initial-scale=1"}]
        )
        
        try:
            self.agent = UniversalAIAgent(AppConfig())
            self.backtester = EnhancedBacktester(self.agent)
            self.agent_ready = True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞: {e}")
            self.agent_ready = False
        
        self.setup_layout()
        self.setup_callbacks()
    
    def setup_layout(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ layout –¥–∞—à–±–æ—Ä–¥–∞"""
        
        self.app.layout = html.Div([
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            html.Div([
                html.H1("ü§ñ –ò–ò-–ê–≥–µ–Ω—Ç: –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞", 
                       style={'textAlign': 'center', 'color': '#2ecc71', 'marginBottom': '20px'}),
                html.P("–ú–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò", 
                      style={'textAlign': 'center', 'color': '#7f8c8d'})
            ], className='row'),
            
            # –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞
            html.Div([
                html.Div([
                    html.H4("–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", style={'marginBottom': '10px'}),
                    html.Div(
                        "‚úÖ –ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ" if self.agent_ready else "‚ùå –ê–≥–µ–Ω—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω",
                        style={
                            'padding': '10px',
                            'backgroundColor': '#2ecc71' if self.agent_ready else '#e74c3c',
                            'color': 'white',
                            'borderRadius': '5px',
                            'textAlign': 'center',
                            'fontWeight': 'bold'
                        }
                    )
                ], className='six columns'),
                
                html.Div([
                    html.H4("–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç", style={'marginBottom': '10px'}),
                    html.P("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –∏ –Ω–∞–∂–º–∏—Ç–µ '–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞")
                ], className='six columns'),
            ], className='row', style={'marginBottom': '30px'}),
            
            # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            html.Div([
                html.Div([
                    html.Label("–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞:"),
                    dcc.Input(
                        id='symbol-input', 
                        value='BTCUSDT', 
                        type='text',
                        style={'width': '100%', 'padding': '10px'}
                    )
                ], className='three columns'),
                
                html.Div([
                    html.Label("–¢–∞–π–º—Ñ—Ä–µ–π–º:"),
                    dcc.Dropdown(
                        id='timeframe-dropdown',
                        options=[
                            {'label': '15 –º–∏–Ω—É—Ç', 'value': '15m'},
                            {'label': '1 —á–∞—Å', 'value': '1h'},
                            {'label': '4 —á–∞—Å–∞', 'value': '4h'},
                            {'label': '1 –¥–µ–Ω—å', 'value': '1d'}
                        ],
                        value='4h',
                        style={'width': '100%'}
                    )
                ], className='three columns'),
                
                html.Div([
                    html.Label("–ú–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞:"),
                    dcc.Checklist(
                        id='methods-checklist',
                        options=[
                            {'label': ' –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π', 'value': 'technical'},
                            {'label': ' –í–∞–π–∫–æ—Ñ—Ñ', 'value': 'wyckoff'},
                            {'label': ' –≠–ª–ª–∏–æ—Ç—Ç', 'value': 'elliott'},
                            {'label': ' –°–µ–Ω—Ç–∏–º–µ–Ω—Ç', 'value': 'sentiment'}
                        ],
                        value=['technical', 'wyckoff'],
                        style={'marginTop': '5px'}
                    )
                ], className='three columns'),
                
                html.Div([
                    html.Label("–î–µ–π—Å—Ç–≤–∏–µ:"),
                    html.Br(),
                    html.Button('üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å', id='analyze-btn', n_clicks=0,
                               style={'backgroundColor': '#3498db', 'color': 'white', 'marginRight': '10px'}),
                    html.Button('üìà –ë—ç–∫—Ç–µ—Å—Ç', id='backtest-btn', n_clicks=0,
                               style={'backgroundColor': '#9b59b6', 'color': 'white'})
                ], className='three columns'),
            ], className='row', style={'marginBottom': '30px', 'padding': '20px', 'backgroundColor': '#f8f9fa', 'borderRadius': '10px'}),
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            html.Div([
                html.Div([
                    html.H3("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞", id='analysis-title'),
                    dcc.Loading(
                        id="analysis-loading",
                        type="circle",
                        children=html.Div(id="analysis-results")
                    )
                ], className='six columns', style={'padding': '20px'}),
                
                html.Div([
                    html.H3("–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã"),
                    dcc.Graph(id='price-chart')
                ], className='six columns', style={'padding': '20px'}),
            ], className='row'),
            
            # –ë—ç–∫—Ç–µ—Å—Ç
            html.Div([
                html.Div([
                    html.H3("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ç–∫—Ç–µ—Å—Ç–∞"),
                    html.Label("–ü–µ—Ä–∏–æ–¥ –±—ç–∫—Ç–µ—Å—Ç–∞:"),
                    dcc.DatePickerRange(
                        id='date-range',
                        start_date=pd.to_datetime('2024-01-01'),
                        end_date=pd.to_datetime(datetime.now().strftime('%Y-%m-%d')),
                        display_format='YYYY-MM-DD'
                    ),
                    html.Br(),
                    html.Button('üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç', id='run-backtest-btn', n_clicks=0,
                               style={'backgroundColor': '#e67e22', 'color': 'white', 'marginTop': '10px'})
                ], className='four columns', style={'padding': '20px', 'backgroundColor': '#f8f9fa', 'borderRadius': '10px'}),
                
                html.Div([
                    html.H3("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞"),
                    dcc.Loading(
                        id="backtest-loading",
                        type="circle",
                        children=html.Div(id="backtest-results")
                    )
                ], className='eight columns', style={'padding': '20px'}),
            ], className='row', id='backtest-section', style={'display': 'none'}),
            
            # –°–∫—Ä—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            dcc.Store(id='analysis-data'),
            dcc.Store(id='backtest-data'),
            
        ], style={'padding': '20px'})
    
    def setup_callbacks(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ callback'–æ–≤"""
        
        @self.app.callback(
            [Output('analysis-results', 'children'),
             Output('price-chart', 'figure'),
             Output('analysis-data', 'data')],
            [Input('analyze-btn', 'n_clicks')],
            [State('symbol-input', 'value'),
             State('timeframe-dropdown', 'value'),
             State('methods-checklist', 'value')]
        )
        def update_analysis(n_clicks, symbol, timeframe, methods):
            if n_clicks == 0 or not self.agent_ready:
                return self._get_placeholder_analysis(), self._get_empty_chart(), None
            
            try:
                # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                async def run_analysis():
                    return await self.agent.analyze_pair(
                        symbol=symbol,
                        timeframe=timeframe,
                        analysis_methods=methods,
                        include_news=True,
                        include_fundamental=True
                    )
                
                result = asyncio.run(run_analysis())
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω—ã
                price_chart = self._create_price_chart(result)
                
                return self._create_analysis_layout(result), price_chart, result
                
            except Exception as e:
                return self._create_error_layout(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"), self._get_empty_chart(), None
        
        @self.app.callback(
            [Output('backtest-section', 'style'),
             Output('backtest-results', 'children')],
            [Input('backtest-btn', 'n_clicks')]
        )
        def show_backtest_section(n_clicks):
            if n_clicks == 0:
                return {'display': 'none'}, html.Div("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±—ç–∫—Ç–µ—Å—Ç")
            else:
                return {'display': 'block'}, html.Div("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—ç–∫—Ç–µ—Å—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç'")
        
        @self.app.callback(
            Output('backtest-results', 'children', allow_duplicate=True),
            [Input('run-backtest-btn', 'n_clicks')],
            [State('symbol-input', 'value'),
             State('timeframe-dropdown', 'value'),
             State('methods-checklist', 'value'),
             State('date-range', 'start_date'),
             State('date-range', 'end_date')],
            prevent_initial_call=True
        )
        def run_backtest(n_clicks, symbol, timeframe, methods, start_date, end_date):
            if n_clicks == 0 or not self.agent_ready:
                return html.Div("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±—ç–∫—Ç–µ—Å—Ç")
            
            try:
                async def run_async_backtest():
                    return await self.backtester.run_enhanced_backtest(
                        symbol=symbol,
                        timeframe=timeframe,
                        analysis_methods=methods,
                        start_date=start_date,
                        end_date=end_date
                    )
                
                result = asyncio.run(run_async_backtest())
                report = self.backtester.generate_comprehensive_report(result, symbol, timeframe)
                
                return self._create_backtest_layout(report, symbol, timeframe)
                
            except Exception as e:
                return self._create_error_layout(f"–û—à–∏–±–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞: {str(e)}")
    
    def _create_analysis_layout(self, result):
        """–°–æ–∑–¥–∞–Ω–∏–µ layout —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞"""
        signal = result['ai_signal']
        
        # –¶–≤–µ—Ç —Å–∏–≥–Ω–∞–ª–∞
        if signal.action == 'BUY':
            signal_color = '#2ecc71'
            signal_emoji = 'üü¢'
        elif signal.action == 'SELL':
            signal_color = '#e74c3c'
            signal_emoji = 'üî¥'
        else:
            signal_color = '#f39c12'
            signal_emoji = 'üü°'
        
        return html.Div([
            html.Div([
                html.H4(f"{signal_emoji} –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª", style={'color': signal_color}),
                html.P(f"–î–µ–π—Å—Ç–≤–∏–µ: {signal.action}", style={'fontSize': '24px', 'fontWeight': 'bold', 'color': signal_color}),
                html.P(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.1%}"),
                html.P(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${result['current_price']:.2f}"),
            ], style={'padding': '15px', 'backgroundColor': '#f8f9fa', 'borderRadius': '10px', 'marginBottom': '15px'}),
            
            html.Div([
                html.H5("üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–¥–µ–ª–∫–∏"),
                html.Table([
                    html.Tr([html.Td("–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:"), html.Td(f"${signal.entry_price:.2f}")]),
                    html.Tr([html.Td("–°—Ç–æ–ø-–ª–æ—Å—Å:"), html.Td(f"${signal.stop_loss:.2f}")]),
                    html.Tr([html.Td("–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç:"), html.Td(f"${signal.take_profit:.2f}")]),
                ], style={'width': '100%'})
            ], style={'padding': '15px', 'backgroundColor': '#f8f9fa', 'borderRadius': '10px', 'marginBottom': '15px'}),
            
            html.Div([
                html.H5("üìù –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ"),
                html.P(signal.reasoning, style={'textAlign': 'justify'})
            ], style={'padding': '15px', 'backgroundColor': '#f8f9fa', 'borderRadius': '10px'}),
        ])
    
    def _create_price_chart(self, result):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω—ã"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
        fig = go.Figure()
        
        fig.add_trace(go.Scatter(
            x=[1, 2, 3, 4, 5],
            y=[result['current_price'] * 0.95, result['current_price'] * 0.98, 
               result['current_price'], result['current_price'] * 1.02, result['current_price'] * 1.05],
            mode='lines+markers',
            name='Price'
        ))
        
        fig.update_layout(
            title=f"–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã {result['symbol']}",
            xaxis_title="–í—Ä–µ–º—è",
            yaxis_title="–¶–µ–Ω–∞ ($)",
            showlegend=True
        )
        
        return fig
    
    def _create_backtest_layout(self, report, symbol, timeframe):
        """–°–æ–∑–¥–∞–Ω–∏–µ layout —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        metrics = report['metrics']
        
        return html.Div([
            html.H4(f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞ {symbol} ({timeframe})"),
            
            html.Div([
                html.Div([
                    html.H5("üìä –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"),
                    html.Table([
                        html.Tr([html.Td("–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:"), html.Td(metrics['total_trades'])]),
                        html.Tr([html.Td("Win Rate:"), html.Td(f"{metrics['win_rate']:.1%}")]),
                        html.Tr([html.Td("–û–±—â–∏–π PnL:"), html.Td(f"${metrics['total_pnl']:.2f}")]),
                        html.Tr([html.Td("–§–∞–∫—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏:"), html.Td(f"{metrics['profit_factor']:.2f}")]),
                    ], style={'width': '100%'})
                ], className='six columns'),
                
                html.Div([
                    html.H5("‚ö° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"),
                    html.Table([
                        html.Tr([html.Td("–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞:"), html.Td(f"{metrics['max_drawdown']:.1f}%")]),
                        html.Tr([html.Td("–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å:"), html.Td(f"${metrics['avg_win']:.2f}")]),
                        html.Tr([html.Td("–°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫:"), html.Td(f"${metrics['avg_loss']:.2f}")]),
                        html.Tr([html.Td("–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:"), html.Td(f"{metrics['avg_trade_duration']:.1f} –¥–Ω.")]),
                    ], style={'width': '100%'})
                ], className='six columns'),
            ], className='row', style={'marginBottom': '20px'}),
            
            html.Div([
                html.H5("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏"),
                html.Table([
                    html.Tr([
                        html.Th("–í—Ö–æ–¥"),
                        html.Th("–í—ã—Ö–æ–¥"),
                        html.Th("–í—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞"),
                        html.Th("–í—ã—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞"),
                        html.Th("PnL"),
                        html.Th("–†–µ–∑—É–ª—å—Ç–∞—Ç")
                    ])
                ] + [
                    html.Tr([
                        html.Td(trade['entry_time'].strftime('%m/%d %H:%M')),
                        html.Td(trade['exit_time'].strftime('%m/%d %H:%M')),
                        html.Td(f"${trade['entry_price']:.2f}"),
                        html.Td(f"${trade['exit_price']:.2f}"),
                        html.Td(f"${trade['pnl']:.2f}", style={'color': 'green' if trade['pnl'] > 0 else 'red'}),
                        html.Td("‚úÖ" if trade['success'] else "‚ùå")
                    ]) for trade in report['trades'][:5]
                ], style={'width': '100%', 'fontSize': '12px'})
            ])
        ])
    
    def _get_placeholder_analysis(self):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        return html.Div([
            html.H4("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–ò-–ê–≥–µ–Ω—Ç!"),
            html.P("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤."),
            html.Ul([
                html.Li("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)"),
                html.Li("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º –∞–Ω–∞–ª–∏–∑–∞"),
                html.Li("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞"),
                html.Li("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å'")
            ])
        ])
    
    def _get_empty_chart(self):
        """–ü—É—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫"""
        fig = go.Figure()
        fig.update_layout(
            title="–ì—Ä–∞—Ñ–∏–∫ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞",
            xaxis_title="–í—Ä–µ–º—è",
            yaxis_title="–¶–µ–Ω–∞ ($)"
        )
        return fig
    
    def _create_error_layout(self, error_message):
        """Layout —Å –æ—à–∏–±–∫–æ–π"""
        return html.Div([
            html.H4("‚ùå –û—à–∏–±–∫–∞"),
            html.P(error_message),
            html.P("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        ], style={'color': 'red'})
    
    def run_server(self, debug=True, port=8050):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–∞—à–±–æ—Ä–¥–∞"""
        if not self.agent_ready:
            print("‚ùå –ê–≥–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π.")
            return
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞ –Ω–∞ http://localhost:{port}")
        print("üí° –û—Ç–∫—Ä–æ–π—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π URL –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
        self.app.run_server(debug=debug, port=port)

# –ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞
if __name__ == "__main__":
    dashboard = BacktestDashboard()
    dashboard.run_server(debug=True, port=8050)