# dashboard/live_dashboard.py
import dash
from dash import dcc, html, Input, Output
import plotly.graph_objects as go
import pandas as pd
from core.universal_agent import UniversalAIAgent
from core.config import AppConfig
from backtesting.enhanced_backtester import EnhancedBacktester

class BacktestDashboard:
    def __init__(self):
        self.app = dash.Dash(__name__)
        self.agent = UniversalAIAgent(AppConfig())
        self.backtester = EnhancedBacktester(self.agent)
        
        self.setup_layout()
        self.setup_callbacks()
    
    def setup_layout(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ layout –¥–∞—à–±–æ—Ä–¥–∞"""
        
        self.app.layout = html.Div([
            html.H1("üéØ –ò–ò-–ê–≥–µ–Ω—Ç: –î–∞—à–±–æ—Ä–¥ –±—ç–∫—Ç–µ—Å—Ç–∞", 
                   style={'textAlign': 'center', 'color': '#2ecc71'}),
            
            html.Div([
                html.Div([
                    html.Label("–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞:"),
                    dcc.Input(id='symbol-input', value='BTCUSDT', type='text')
                ], className='six columns'),
                
                html.Div([
                    html.Label("–¢–∞–π–º—Ñ—Ä–µ–π–º:"),
                    dcc.Dropdown(
                        id='timeframe-dropdown',
                        options=[
                            {'label': '1 —á–∞—Å', 'value': '1h'},
                            {'label': '4 —á–∞—Å–∞', 'value': '4h'},
                            {'label': '1 –¥–µ–Ω—å', 'value': '1d'}
                        ],
                        value='4h'
                    )
                ], className='six columns'),
            ], className='row'),
            
            html.Div([
                html.Div([
                    html.Label("–ú–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞:"),
                    dcc.Checklist(
                        id='methods-checklist',
                        options=[
                            {'label': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑', 'value': 'technical'},
                            {'label': '–í–∞–π–∫–æ—Ñ—Ñ', 'value': 'wyckoff'},
                            {'label': '–í–æ–ª–Ω—ã –≠–ª–ª–∏–æ—Ç—Ç–∞', 'value': 'elliott'},
                            {'label': '–°–µ–Ω—Ç–∏–º–µ–Ω—Ç-–∞–Ω–∞–ª–∏–∑', 'value': 'sentiment'}
                        ],
                        value=['technical', 'wyckoff']
                    )
                ], className='six columns'),
                
                html.Div([
                    html.Label("–ü–µ—Ä–∏–æ–¥:"),
                    dcc.DatePickerRange(
                        id='date-range',
                        start_date=pd.to_datetime('2024-01-01'),
                        end_date=pd.to_datetime('2024-03-01')
                    )
                ], className='six columns'),
            ], className='row'),
            
            html.Button('–ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç', id='run-backtest', n_clicks=0,
                       style={'backgroundColor': '#2ecc71', 'color': 'white'}),
            
            dcc.Loading(
                id="loading",
                type="circle",
                children=html.Div(id="backtest-results")
            )
        ])
    
    def setup_callbacks(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ callback'–æ–≤"""
        
        @self.app.callback(
            Output('backtest-results', 'children'),
            Input('run-backtest', 'n_clicks'),
            [Input('symbol-input', 'value'),
             Input('timeframe-dropdown', 'value'),
             Input('methods-checklist', 'value'),
             Input('date-range', 'start_date'),
             Input('date-range', 'end_date')]
        )
        def update_backtest(n_clicks, symbol, timeframe, methods, start_date, end_date):
            if n_clicks == 0:
                return html.Div("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç'")
            
            # –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            import asyncio
            result = asyncio.run(self.run_async_backtest(
                symbol, timeframe, methods, start_date, end_date
            ))
            
            return self.create_results_layout(result)
        
        async def run_async_backtest(self, symbol, timeframe, methods, start_date, end_date):
            """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞"""
            enhanced_result = await self.backtester.run_enhanced_backtest(
                symbol=symbol,
                timeframe=timeframe,
                analysis_methods=methods,
                start_date=start_date,
                end_date=end_date
            )
            
            report = self.backtester.generate_comprehensive_report(
                enhanced_result, symbol, timeframe
            )
            
            return report
        
        def create_results_layout(self, report):
            """–°–æ–∑–¥–∞–Ω–∏–µ layout —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
            
            return html.Div([
                html.H3("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞"),
                
                # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
                dcc.Graph(figure=report['main_chart']),
                
                # –ú–µ—Ç—Ä–∏–∫–∏
                html.Div([
                    html.Div([
                        html.H4("–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏"),
                        html.Table([
                            html.Tr([html.Td("–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:"), html.Td(report['metrics']['total_trades'])]),
                            html.Tr([html.Td("Win Rate:"), html.Td(f"{report['metrics']['win_rate']:.2%}")]),
                            html.Tr([html.Td("–û–±—â–∏–π PnL:"), html.Td(f"${report['metrics']['total_pnl']:.2f}")]),
                            html.Tr([html.Td("–§–∞–∫—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏:"), html.Td(f"{report['metrics']['profit_factor']:.2f}")]),
                        ])
                    ], className='six columns'),
                    
                    # –ì—Ä–∞—Ñ–∏–∫ –º–µ—Ç—Ä–∏–∫
                    html.Div([
                        dcc.Graph(figure=report['metrics_dashboard'])
                    ], className='six columns')
                ], className='row'),
                
                # –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫
                html.H4("–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫"),
                html.Table([
                    html.Tr([
                        html.Th("–í—Ö–æ–¥"),
                        html.Th("–í—ã—Ö–æ–¥"), 
                        html.Th("–í—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞"),
                        html.Th("–í—ã—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞"),
                        html.Th("PnL"),
                        html.Th("–†–µ–∑—É–ª—å—Ç–∞—Ç")
                    ])
                ] + [
                    html.Tr([
                        html.Td(trade['entry_time'].strftime('%Y-%m-%d %H:%M')),
                        html.Td(trade['exit_time'].strftime('%Y-%m-%d %H:%M')),
                        html.Td(f"${trade['entry_price']:.2f}"),
                        html.Td(f"${trade['exit_price']:.2f}"),
                        html.Td(f"${trade['pnl']:.2f}", 
                               style={'color': 'green' if trade['pnl'] > 0 else 'red'}),
                        html.Td("‚úÖ" if trade['success'] else "‚ùå")
                    ]) for trade in report['trades'][:10]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å–¥–µ–ª–æ–∫
                ])
            ])
    
    def run_server(self, debug=True, port=8050):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–∞—à–±–æ—Ä–¥–∞"""
        self.app.run_server(debug=debug, port=port)

# –ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞
if __name__ == "__main__":
    dashboard = BacktestDashboard()
    dashboard.run_server()